/**

\page FrameAPI The Frame API

The Frame API provides a Qt-signal based mechanism for performing custom periodic or delayed computation. 
Using this method for timing is preferred over using manual timers, to allow a centralized place for
controlling system execution speed and pausing or resuming the simulation.

\section FrameAPI_Cont Per-frame events 

Getting function called each frame is very simple: just connect to the FrameAPI's FrameUpdated(float) signal.

C++ example:
\code
// Precondition: myObj is a QObject and has a public slot OnFrameUpdated(float)
QObject::connect(GetFramework()->Frame(), SIGNAL(Updated(float)), myObj, SLOT(OnFrameUpdated(float)));
\endcode

JavaScript example:
\code
frame.Updated.connect(OnFrameUpdated);

function OnFrameUpdated(frameTime)
{
    print("Time elapsed since last frame " + frameTime);
}
\endcode

\section FrameAPI_Delayed Delayed execution

Getting function to be called delayed, in x seconds is simple.

C++ example:
\code
// Precondition: myObj is a QObject and has a public slot OnDelayedExecution(float)
GetFramework()->Frame()->DelayedExecute(2.0f, myObj, SLOT(OnDelayedExecution(float)));
\endcode

JavaScript example:
\code
frame.DelayedExecute(2.0).Triggered.connect(OnDelayedExecution);

function OnDelayedExecution()
{
    print("2 seconds elapsed since connecting to FrameAPI's DelayedSignal.");
}
\endcode

\section FrameAPI_Periodic Periodic events

Getting function called continuously every n seconds is also very simple: just connect to the same delayed execution again in the handler function.

JavaScript example:
\code
frame.DelayedExecute(2.0).Triggered.connect(OnDelayedExecution);

function OnDelayedExecution()
{
    print("This text is printed every two seconds.");
    frame.DelayedExecute(2.0).Triggered.connect(OnDelayedExecution);
}
\endcode
*/