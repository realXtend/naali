/*! \mainpage

\section intro_sec Introduction

Welcome to the Tundra developer documentation. This page is a site map that assembles together all the major features offered by Tundra.

<table style="margin: 20px;">
<tr>
<td style="width:500px; height: 100px; border: solid 1px black; background-color: #e0ffd0; vertical-align: top; padding: 5px;">
<h2>Download</h2>
Obtain Tundra from
<ul>
<li><a href="http://code.google.com/p/realxtend-naali/downloads/list">A binary distribution</a> (Windows and Mac).
<li><a href="http://tundra.ludocraft.com/builds/nightly/">Nightly developer builds</a> (Windows) from the LudoCraft fork.
<li><a href="http://github.com/realXtend">Source repository on github</a>.
<li><a href="http://code.google.com/p/realxtend-tundra-deps/">Binary dependencies repository on Google code</a>.
</ul>
<a href="http://github.com/realXtend/naali/blob/develop/license.txt">Tundra distribution license</a>.
</td>
<td style="width:500px; height: 100px; border: solid 1px black; background-color: #e0ffd0; vertical-align: top; padding: 5px;">
<h2>Getting Started</h2>
Follow these first steps.
<ul>
<li>\ref BuildOnWindows "Building and Running Tundra on Windows".
<li>\ref BuildOnUbuntu "Building and Running Tundra on Ubuntu 11.10".
<li>\ref BuildOnMac "Building and Running Tundra on Mac OS X".
<li>\ref RunningTundra "Configuring and Running Tundra."
<li>\ref BuildOgreFork "Optional: Building Tundra against the ogre-safe-nocrashes fork."
</ul>
</td>
</tr>

<tr>
<td style="width:500px; height: 100px; border: solid 1px black; background-color: #e0ffd0; vertical-align: top; padding: 5px;">
<h2>Community</h2>
Contact Tundra developers and users at
<ul>
<li><a href="http://groups.google.com/group/realxtend-dev">Developer mailing list</a>.
<li><a href="http://groups.google.com/group/realxtend">End-user mailing list</a>.
<li>IRC channels: #realxtend and #realxtend-dev on <a href="http://freenode.net/">freenode</a>.
<li>Bug tracker: <a href="http://github.com/realXtend/naali/issues">github</a>
</ul>
</td>
<td style="width:500px; height: 100px; border: solid 1px black; background-color: #e0ffd0; vertical-align: top; padding: 5px;">
<h2>Technical Resources</h2>
See the following pages for help on working on the Tundra codebase.  
<ul>
<li>\ref progconv "Coding conventions."
<li><a href="http://wiki.realxtend.org/index.php/Header_Usage_Best_Practices">Header usage best practices</a>.
<li>\ref TundraArchitectureOverview "Tundra Architecture Overview."
<li>\ref component_base "Entity-Component reference."
<li>\ref TundraScriptReference "Tundra scripting reference."
<li>\ref TundraDocumentfiles "Working with Tundra document files."
<li>\ref MumbleVoipSetup "Setting up Mumble VOIP."
<li>\ref SettingUpWebdav "Setting up an http asset storage with WebDAV."
<li>Documentations of major external libraries used with Tundra:
<ul><li><a href="http://doc.qt.nokia.com/">Qt documentation</a>.</ul>
<ul><li><a href="http://www.ogre3d.org/docs/api/html/">Ogre documentation</a>.</ul>
<ul><li><a href="http://clb.demon.fi/knet/">kNet documentation</a>.</ul>
<ul><li><a href="http://clb.demon.fi/MathGeoLib/">Game Math and Geometry Library</a>.</ul>
<li>\ref TundraSecurity "Tundra and Security"
<li>\ref TerrainHeightmaps "Working with Tundra Terrains (.ntf files)"
</ul>
</ul>
</td>
</tr>

</table>

The functionality built into Tundra is subdivided into core libraries and optional subsystems. The core libraries are sets of APIs that each expose some functionality of the Tundra system to native C++ code or scripted modules or scene entities. 
These interfaces are accessible directly through the root Framework object. The individual subsystems are accessible by querying the appropriate modules using the Module API.     

The root object for accessing all Tundra features is the Framework object. This object drives the main loop and gives access of all the core APIs to modules and scripts. For more information, see
- \ref Framework "the Framework class".
- \ref FrameAPI "Tundra Frame API."

\section CoreAPIList Core

The Tundra SDK consists of the following set of core APIs that are accessible from client modules, components and scripts.
<table style="margin: 20px;">
<tr>
<td style="width:500px; height: 100px; border: solid 1px black; background-color: #e0d0ff; vertical-align: top; padding: 5px;">
<h3>Module</h3>
The \ref ModuleArchitecture "Module" API gives access to all the modules registered in the system. For working with modules, see the following topics:
- \ref communication_sec "Accessing modules in your code."
- \ref creating_sec "Creating a new module using C++."
- \ref module_python "Creating a new module using Python."
- \ref module_cmake "Setting up cmake files and PCHs for your module."
- \ref module_def_sec "Module definition file and load orders."
- \ref module_locale "Supporting localization in your module." 

Classes:
<ul>
<li>Framework
<li>IModule
</ul>  
</td>
<td style="width:500px; height: 100px; border: solid 1px black; background-color: #e0d0ff; vertical-align: top; padding: 5px;">
<h3>Event</h3>
The <a href="http://doc.qt.nokia.com/4.7/signalsandslots.html">Qt's signals and slots mechanism</a> is used for communication between objects.

</td>
</tr>

<tr>
<td style="width:500px; height: 100px; border: solid 1px black; background-color: #e0d0ff; vertical-align: top; padding: 5px;">
<h3>Config</h3>
Implements a uniform mechanism for modules to store their configuration data. \ref ConfigAPI "Main documentation page."

More information:
- \ref ConfigReadWrite "Reading and writing configuration data."
- \ref ConfigDefaultValues "Using default values."

Classes:
- ConfigAPI
- ConfigData

</td>
<td style="width:500px; height: 100px; border: solid 1px black; background-color: #e0d0ff; vertical-align: top; padding: 5px;">
<h3>Debug</h3>
Contains useful development-time mechanisms like memory tracking and execution time profiling.

Topics:
- Detecting memory leaks.
- Using the Tundra execution time profiler.
- Performing automated network testing.

Classes:
- Profiler
- ProfilerBlock
</td>
</tr>

<tr>
<td style="width:500px; height: 100px; border: solid 1px black; background-color: #e0d0ff; vertical-align: top; padding: 5px;">
<h3>Input</h3>
Provides access to Qt input devices in a contextual order.

InputAPI is available as 'input' in Javascript and 'tundra.input' in Python.

Follow these topics to learn more:
- Reading input through an InputContext.
- Providing reconfigurable key bindings with keyboard mappings.
- InputContext priorities and playing nice with Qt.
- Polling for input. 
</td>

Classes:
- InputAPI
- InputContext
- KeyEvent
- MouseEvent

<td style="width:500px; height: 100px; border: solid 1px black; background-color: #e0d0ff; vertical-align: top; padding: 5px;">
<h3>UI</h3>
Exposes the Tundra main window and allows clients to create and show their own Qt-based windows.

UiAPI is available as 'ui' in Javascript and 'tundra.ui' in Python.
</td>

Classes:
- UiAPI
- UiMainWindow
- UiGraphicsView
- UiProxyWidget

</tr>

<tr>
<td style="width:500px; height: 100px; border: solid 1px black; background-color: #e0d0ff; vertical-align: top; padding: 5px;">
<h3>Scene</h3>
Gives access to the Tundra 3D scene structure: entities, components and attributes.

SceneAPI is available as 'scene' in Javascript and 'tundra.scene' in Python.

Topics:
<ul>
<li>\ref SceneModelPage "Scenes, entities and components."
<li>Attributes and attribute metadata.
<li>\ref EntityActionPage "Entity actions".
<li>Accessing scene contents from C++ code.
<li>Working with multiple scenes.
<li>Accessing entity attributes using JavaScript.   
<li>Accessing entity attributes using Python.
<li>Creating new component types.
<li>Creating new attribute types.
<li>Entity attribute replication model.
</ul>
Classes:
<ul>
<li>SceneAPI
<li>Scene
<li>Entity
<li>EntityAction
<li>IComponent
<li>IAttribute
<li>AttributeMetadata
</ul>

</td>
<td style="width:500px; height: 100px; border: solid 1px black; background-color: #e0d0ff; vertical-align: top; padding: 5px;">
<h3>Asset</h3>
Implements the Tundra asset system and a pluggable asset provider architecture for streaming in asset data files.

For more information, see
- \ref SettingUpWebdav "Setting up an http asset storage with WebDAV."
- Assets on localhost.
- HTTP asset provider.
- Implementing a new asset provider plugin.
- Tundra asset cache structure.
</td>

Classes:
- AssetAPI
- ...
</tr>

<tr>
<td style="width:500px; height: 100px; border: solid 1px black; background-color: #e0d0ff; vertical-align: top; padding: 5px;">
<h3>Console</h3>
Allows modules to register new commands that are invokeable from a command line console.
Also provides logging mechanism for dynamic languages.

ConsoleAPI is available as 'console' in Javascript and 'tundra.console' in Python with the support for:
- Registering new console commands.
- Programmatically invoking console commands.

Classes:
- ConsoleAPI
- ConsoleCommand

</td>
<td style="width:500px; height: 100px; border: solid 1px black; background-color: #e0d0ff; vertical-align: top; padding: 5px;">
<h3>Connection</h3>
Exposes the functionality related to the currently active server connection, if Tundra is connected to a server.   
</td>

Classes:
- TundraLogic::TundraLogicModule
- TundraLogic::Client
- UserConnection
</tr>

<tr>
<td style="width:500px; height: 100px; border: solid 1px black; background-color: #e0d0ff; vertical-align: top; padding: 5px;">
<h3>Server</h3>
If Tundra is acting as a network server, this interface can be accessed to interact with the currently active client connections.    

Classes:
- TundraLogic::TundraLogicModule
- TundraLogic::Server
- UserConnection
</td>

<td style="width:500px; height: 100px; border: solid 1px black; background-color: #e0d0ff; vertical-align: top; padding: 5px;">
<h3>Audio</h3>
Provides functions for playing back audio on the client. \ref OpenALAudioModule "Main documentation page."

Topics:
 - \ref OpenALAudioModule "Using the sound system".
 - todo: add here the concepts related to audio.

Classes:
 - AudioAPI
 - ...
</td>
</tr>

<tr>
<td style="width:500px; height: 100px; border: solid 1px black; background-color: #e0d0ff; vertical-align: top; padding: 5px;">
<h3>Frame</h3>
Exposes signals for frame- and time-related event processing.
</td>
Topics:
- \ref FrameAPI_Cont "Executing per-frame processing".
- \ref FrameAPI_Delayed "Delayed one-time execution".
- \ref FrameAPI_Periodic "Periodic execution".

The Frame API is accessed through the class FrameAPI.

Classes:
- FrameAPI
- DelayedSignal

</tr>

<!--
<td style="width:500px; height: 100px; border: solid 1px black; background-color: #e0d0ff; vertical-align: top; padding: 5px;">
<h3></h3>
</td>
-->

</table>

<h2>Tundra Scene Structure</h2>

The most visible part of Tundra to end-users and world builders is the Tundra scene structure. The Scene API is used to access this scene in program code. 
The \ref component_base "Tundra Entity Component Reference" page contains a reference documentation for all the components that make up a scene. 

\section TundraSubsystems Subsystems
In addition to providing the core API, Tundra contains the following functional subsystems, implemented as sets of modules.

<table style="margin: 20px;">
<tr>
<td style="width:500px; height: 120px; border: solid 1px black; background-color: #ffe0d0; vertical-align: top; padding: 5px;">
<h3>Renderer</h3>
This subsystem consists of the rendering library and the graphics-related Tundra scene features.  

See the following topics for more information:
    - \ref OgreRenderingModule "Using the Ogre renderer module".

<p>Implemented by modules
<ul>
<li>\ref OgreRenderer::OgreRenderingModule "OgreRenderingModule"
<ul><li>Exposes the components EC_AnimationController, EC_Billboard, EC_Camera, EC_EnvironmentLight, EC_Fog, EC_Light, EC_Material, EC_Mesh, EC_OgreCompositor, EC_ParticleSystem, EC_Placeable, EC_RttTarget, and EC_Sky.</ul> 
<li>EnvironmentModule
<ul><li>Exposes the components EC_Terrain and EC_WaterPlane.</ul> 
<li>SkyXHydrax
<ul><li>Exposes the components EC_SkyX and EC_Hydrax.</ul> 
</ul>

</td>
</tr>
</table>

<table style="margin: 20px;">
<tr>
<td style="width:500px; height: 120px; border: solid 1px black; background-color: #ffe0d0; vertical-align: top; padding: 5px;">
<h3>Physics</h3>
Physics simulation using Bullet.

<p>Implemented by modules
<ul>
<li>Physics::PhysicsModule
<ul><li>Exposes the components EC_RigidBody, EC_VolumeTrigger.</ul>
</ul>
</td>
</tr>
</table>

<table style="margin: 20px;">
<tr>
<td style="width:500px; height: 120px; border: solid 1px black; background-color: #ffe0d0; vertical-align: top; padding: 5px;">
<h3>Script</h3>
Allows implementing modules using the Python script language as well as embedding new functionality into scene entities by using JavaScript or Python.

<p>Implemented by modules and components
<ul>
<li>PythonScript::PythonScriptModule
<li>JavascriptModule
<li>EC_Script
<li>EC_DynamicComponent
</ul>

</td>
</tr>
</table>

<table style="margin: 20px;">
<tr>
<td style="width:500px; height: 120px; border: solid 1px black; background-color: #ffe0d0; vertical-align: top; padding: 5px;">
<h3>Communication</h3>
The subsystem of Tundra that provides video and audio communication features between clients connected to the world.

See the following topics for more information:
    - \ref MumbleVoipSetup "Setting up Mumble VOIP."

<p>Implemented by modules
<ul>
<li>MumbleVoip::MumbleVoipModule
<li>VlcPlugin
</ul>

</td>
</tr>
</table>
*/
