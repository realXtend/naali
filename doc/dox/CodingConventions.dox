/**

\page progconv Programming Conventions

This page describes the different conventions for producing code and documentation for the RealXtend Tundra project.

\section nameconv Naming Conventions

\subsection nameconvp Code Organization, Naming and Formatting

All code files must contain the the following licensing information:
\verbatim
// For conditions of distribution and use, see copyright notice in LICENSE
\endverbatim

All publicly visible classes should be declared in their own header file using the <b>.h</b> extension, 
placed in the folder of the sub-project in question, and named after the class. 
Small tightly related classes, which are always included together may be declared in the same header file. 
Internal helper structures or function objects may be declared in a <b>.cpp</b> file.
<b>Implementations</b> should be placed in a source file called the same name as the class and placed in the folder of the subproject in question.
Very small bodies of template and inline code may be placed inside the class header, but any larger pieces of code
should be placed in an .inl file that matches the classes name, for example for a class Entity introduced in Entity.h, the file Entity.inl defines the template and inline code that is associated to that class.

\subsection filenameconv Filenames and Directories
Filenames and directories are written in title case with a lower case file extension. F.ex.:
\verbatim
/SomeDirectory/SomeFile.ext
\endverbatim

\subsection nameconvh Header Files
Each .cpp file should have corresponding header file, excluding certain .cpp files such as main.cpp and unit tests.
<b>All header files must have #pragma once inclusion guards.</b>

Use <b>forward declarations</b> to minimize use of \#include declarations in header files.

In all code files, try to order your \#include statements in the following order:
\verbatim
StableHeaders.h (ONLY IN CPP FILE, if applicable)
DebugOperatorNew.h (optional)
file's .h (in cpp file)
same project's .h
other Tundra project's .h
C library
C++ library
other libraries' .h
MemoryLeakCheck.h (optional)
\endverbatim

\subsection nameconvfuncparam Function Parameters
In functions that pass output variables as parameters to the function, prefer the order <b>inputs first, outputs last</b>.
Matk the output variable using the appropriate <b>[out]</b> tag. If you only intend to read from a pointer or reference passed to a function, mark it const.

\subsection scope Scoping and Namespaces
<b>Avoid unnecessary use of namespaces.</b> One namespace within one plugin/module is usually more than enough. The core Tundra functionality is not withing namespace.

Do not place the <b>using namespace</b> directives in .h- or .inl -files. Please use the <b>using namespace</b> directive at a local scope 
whenever it improves readability.

Use unnamed namespaces over the C-like <b>static</b> keyword.

<b>Do not use "Get"-prefix for getters.</b> Use "Is"-prefix for getters that could be mistaken as normal functions: f.ex. property bool empty -> getter IsEmpty.

\subsection Identifier Naming
Use <b>American English</b> when naming classes, structs, functions etc.
The following identifiers are written in <b>title case</b>:
\verbatim
class Entity;
struct AssetReference;
typedef boost::shared_ptr<Entity> EntityPtr;
QString Entity::Name() const;
\endverbatim

Interface classes should be prefixed with 'I'. ex: IAssetProvider.

Local variables and public/protected member variables are written in camel case:
\verbatim
int someLocalVar;
QString IComponent::typeName;
Q_PROPERTY(QString name ...)
\endverbatim

Enums are written in upper case without special prefixes:
\verbatim
enum GizmoType
{
    Translate,
    Rotate,
    Scale
};
\endverbatim

Preprocessor macros are written in upper case with underscores:
\verbatim
#define SAFE_DELETE(p) { delete p; p=0; }
\endverbatim

Prepend variable names of (global) static constants with "c"-prefix:
\verbatim
const int cSomeConstantValue = 1;
\endverbatim

<b>Use constants instead of preprocessor macros for magic numbers/values.</b>

\subsection signals_and_slots Signals and Slots
When naming signals, use the signature to describe what has happened or is about to happen.
Document the signal signature as you would any normal function. Use preferably "Handle" or "On" prefix for functions
handling signals.
\verbatim
signals:
/// This signal is emitted when mouse button is clicked.
/** @button What button was clicked. */
void MouseButtonClicked(int button);

/// This signal is emitted when something is about to happen.
/** @what Description of what is about to happen. */
void SomethingAboutToHappen(const QString &what);

public slots:
/// Prints what mouse button was clicked.
/** @button What button was clicked. */
void HandleMouseButtonClicked(int button);
\endverbatim

If you're not familiar with the concepts of Qt's signals and slots, learn about them here: http://doc.qt.nokia.com/4.7/signalsandslots.html

<b>In your editor, set the tab key to produce 4 spaces. Do not use the tab character. </b> In Visual Studio this feature can be found from Tools -> Options -> Text Editor -> C/C++ -> General.
Parenthesis should use whitespace, and gravitate towards the thing they enclose. ex: if (IsFoo()) Do (bar); not if( IsFoo() ) Do( bar );
Add extra newline at the end of file for crossplatform compatibility.
Insert opening braces on a line of their own.

\section cppstandard Programming Guidelines
Use verbose, descriptive names for classes, methods, variables - everything except trivial counters. 
Code should be self-describing, don't be obtuse.

Some of the existing code do not follow these naming conventions, largely due to the reason that the production was started
before this document was written. Still, when in doubt, observe the existing code. Ambiguities will be resolved here later
if and when necessary.

The RealXtend Tundra architecture uses <b>Qt</b> (http://doc.qt.nokia.com/), <b>STL</b> and <b>Boost</b> (http://www.boost.org/) as the major frameworks. Please prefer using the containers
and algorithms found in those wherever it is sensible. <b>Prefer Qt over the other major frameworks.</b> Avoid being too smart,
there is no need to spend time figuring out how to achieve something using a stl back_inserter_iterator combined with a mem_fun_ref
and a bind2nd if writing it using a simple loop would only take you a moment.

If you need to use code from other dependency libraries in an unexpected context, make sure to document the dependency
clearly. Some of the dependencies are evolving and might be changed out later on.

The core architecture uses <b>boost::shared_ptr</b> and <b>boost::weak_ptr</b> extensively. Be sure to understand how to use these and what their
differences are.

Use <b>assert</b>s to check for conditions that should never occur and that clearly indicate a programming error. Do not use
assert in code that involves validating input data from an user, a file or from network.

Favor <b>not</b> using <b>exceptions</b> for error propagation. Do not use exceptions to manage normal control flow. When writing a catch block that does no 
processing on the actual exception value, or when writing a catch(...)-block, document clearly why nothing is done to handle the 
exception, or describe the not-yet-implemented exception handling using a <b>\@todo</b> block. Avoid writing overly general 
catch blocks that are not in reality aware of all the exceptions they might receive.

Be <b>const-correct</b> (http://www.parashift.com/c++-faq-lite/const-correctness.html) where possible. There are very few places where adding a const is wrong.

For clarity, use <b>typedef</b>s to define template-based types that you use more than once. ex: typedef std::list<MyType*> MyTypeList;

Introduce members of you classes and structs as follows:
\verbatim
class Foo : public QObject
{
    Q_OBJECT // if the class inherits QObject
    // and other possible Qt macros
public:
    // ...
public slots:
    // ...
signals:
    // ...
protected:
    // ...
private:
    // ...
private slots:
    // ...
};
\endverbatim

\section doc Documentation Guidelines

Use the JavaDoc-style doxygen notation. Do not add extra *s on each new line of detailed documenation block. Do not place the comment block ending on a new empty line.
Example:
\verbatim
/// Brief description here.
/** Detailed description begins here.
    And some more information here. */
class Foo
{
public:
    /// Does nothing.
    /** @param someParam Some parameter that is used for nothing. */
    void Bar(void *someParam);
};
\endverbatim

All <b>public</b> classes and methods must be fully documented in English using Doxygen-compatible comments.
Place comments mainly in the header files and not in .cpp -files. Use the <b>\@param</b> and <b>\@return</b> directives to 
define inputs and outputs clearly and <b>\@note</b> to indicate points of interest.

Don't be afraid to use <b>\@todo</b>s and <b>\@bug</b>s to indicate a incomplete or possible erroneous functionality you know to exist,
but cannot for some reason fix now (time *is* a constraint). These comments are worth gold when the software evolves.

Documentation example:

\verbatim
/// Tree widget item representing a component.
class ComponentItem : public QTreeWidgetItem
{
public:
    /// Constructor.
    /** @param comp Component which the item represents.
        @param parent Parent entity item. */
    ComponentItem(const ComponentPtr &comp, EntityItem *parent);

    /// Decorates the item (text + color) accordingly to the component information.
    /** @param comp Component which the item represents. */
    void SetText(IComponent *comp);

    /// Returns pointer to the entity this item represents.
    ComponentPtr Component() const;

    /// Returns the parent entity item.
    EntityItem *Parent() const;

    QString typeName; ///< Type name.
    QString name; ///< Name, if applicable.

private:
    ComponentWeakPtr ptr; ///< Weak pointer to the component this item represents.
    EntityItem *parentItem; ///< Parent entity item.
};

\endverbatim

See ComponentItem for the actual class in realXtend documentation pages.

Full list of Doxygen commands: http://www.stack.nl/~dimitri/doxygen/commands.html

Useful Doxygen examples: http://www.stack.nl/~dimitri/doxygen/docblocks.html

*/
