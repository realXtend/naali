/*!

\page component_base Tundra Entity Component Reference

Tundra provides a set of built-in entity components, which are the building blocks that make up the world. This page is the reference documentation for all these components. 
You can define your own components in C++ by writing your own Tundra module to host it. See the Module API and Scene API for more information on how to do this.

<b>Note:</b> Some of the components listed here are internal to the system and they have never been intended to be used directly from the EC editor.
Basically this means any component that does not contain any attributes or publicly accessible slots or actions.

In C++ code, the components are prefixed with "EC_". In this documentation and in the EC editor, however, all the entity components are referred to without this prefix. 

- \ref EC_AnimationController "AnimationController"
- \ref EC_Avatar "Avatar"
- \ref EC_Billboard "Billboard"
- \ref EC_Camera "Camera"
- \ref EC_DynamicComponent "DynamicComponent"
- \ref EC_EnvironmentLight "EnvironmentLight"
- \ref EC_Fog "Fog"
- \ref EC_GraphicsViewCanvas "GraphicsViewCanvas"
- \ref EC_Highlight "Highlight"
- \ref EC_HoveringText "HoveringText"
- \ref EC_Hydrax "Hydrax"
- \ref EC_InputMapper "InputMapper"
- \ref EC_LaserPointer "LaserPointer"
- \ref EC_Light "Light"
- \ref EC_Material "Material"
- \ref EC_Mesh "Mesh"
- \ref EC_Name "Name"
- \ref EC_OgreCompositor "OgreCompositor"
- \ref EC_ParticleSystem "ParticleSystem"
- \ref EC_Placeable "Placeable"
- \ref EC_PlanarMirror "PlanarMirror"
- \ref EC_ProximityTrigger "ProximityTrigger"
- \ref EC_RigidBody "RigidBody"
- \ref EC_RttTarget "RttTarget"
- \ref EC_Script "Script"
- \ref EC_Sky "Sky"
- \ref EC_SkyX "SkyX"
- \ref EC_SlideShow "SlideShow"
- \ref EC_Sound "Sound"
- \ref EC_SoundListener "SoundListener"
- \ref EC_Terrain "Terrain"
- \ref EC_TransformGizmo "TransformGizmo"
- \ref EC_VolumeTrigger "VolumeTrigger"
- \ref EC_WaterPlane "WaterPlane"
- \ref EC_WebView "WebView"
- \ref EC_WidgetCanvas "WidgetCanvas"

<h2>Scriptable Components</h2>
All the components in Tundra are written in C++. To allow dynamic behavior for data driven ECA data and script contents, the following special components exist:

<table style="margin: 20px;">
<tr>
<td style="width:500px; height: 100px; border: solid 1px black; background-color: #e0ffd0; vertical-align: top; padding: 5px;">
<h2>DynamicComponent</h2>
Unlike other components, the contents of this component are dynamically defined at runtime. This is particularly useful for scripts for managing their own custom application-level data.

Registered by JavascriptModule and/or \ref PythonScript::PythonScriptModule "PythonScriptModule".

The attribute structure of DynamicComponent is not fixed and can be specified at runtime per instance.   
</td>
</tr>

<tr>
<td style="width:500px; height: 100px; border: solid 1px black; background-color: #e0ffd0; vertical-align: top; padding: 5px;">
<h2>Script</h2>
Attaches to the entity a script source file, implemented either in JavaScript or Python. This allows attaching custom application-level logic to an entity.   
</td>
</tr>

</table>

*/
