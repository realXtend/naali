diff -r 63835ef7e534 CMake/ConfigureBuild.cmake
--- a/CMake/ConfigureBuild.cmake	Thu Oct 18 15:30:52 2012 +0300
+++ b/CMake/ConfigureBuild.cmake	Thu Apr 18 10:29:01 2013 +0300
@@ -81,6 +81,7 @@
 set(OGRE_SET_DISABLE_VIEWPORT_ORIENTATIONMODE 0)
 set(OGRE_SET_DISABLE_GLES2_CG_SUPPORT 0)
 set(OGRE_SET_DISABLE_GLES2_GLSL_OPTIMISER 0)
+set(OGRE_SET_DISABLE_LIBCPP_SUPPORT 0)
 set(OGRE_SET_NEW_COMPILERS 0)
 set(OGRE_STATIC_LIB 0)
 set(OGRE_SET_USE_BOOST 0)
@@ -112,6 +113,9 @@
 if (NOT OGRE_CONFIG_ENABLE_ZIP)
   set(OGRE_SET_DISABLE_ZIP 1)
 endif()
+if (NOT OGRE_CONFIG_ENABLE_LIBCPP_SUPPORT)
+  set(OGRE_SET_DISABLE_LIBCPP_SUPPORT 1)
+endif()
 if (NOT OGRE_CONFIG_ENABLE_VIEWPORT_ORIENTATIONMODE)
   set(OGRE_SET_DISABLE_VIEWPORT_ORIENTATIONMODE 1)
 endif()
diff -r 63835ef7e534 CMake/FeatureSummary.cmake
--- a/CMake/FeatureSummary.cmake	Thu Oct 18 15:30:52 2012 +0300
+++ b/CMake/FeatureSummary.cmake	Thu Apr 18 10:29:01 2013 +0300
@@ -120,6 +120,9 @@
 if (OGRE_CONFIG_ENABLE_GLES2_CG_SUPPORT)
 	set(_core "${_core}  + Cg for OpenGL ES 2.0\n")
 endif ()
+if (OGRE_CONFIG_ENABLE_LIBCPP_SUPPORT)
+	set(_core "${_core}  + libc++ support for OS X\n")
+endif ()
 
 if (DEFINED _core)
 	set(_features "${_features}Building core features:\n${_core}")
diff -r 63835ef7e534 CMake/Templates/OgreBuildSettings.h.in
--- a/CMake/Templates/OgreBuildSettings.h.in	Thu Oct 18 15:30:52 2012 +0300
+++ b/CMake/Templates/OgreBuildSettings.h.in	Thu Apr 18 10:29:01 2013 +0300
@@ -35,6 +35,8 @@
 
 #define OGRE_THREAD_PROVIDER @OGRE_SET_THREAD_PROVIDER@
 
+#define OGRE_NO_LIBCPP_SUPPORT @OGRE_SET_DISABLE_LIBCPP_SUPPORT@
+
 #define OGRE_NO_FREEIMAGE @OGRE_SET_DISABLE_FREEIMAGE@
 
 #define OGRE_NO_DDS_CODEC @OGRE_SET_DISABLE_DDS@
diff -r 63835ef7e534 CMakeLists.txt
--- a/CMakeLists.txt	Thu Oct 18 15:30:52 2012 +0300
+++ b/CMakeLists.txt	Thu Apr 18 10:29:01 2013 +0300
@@ -38,6 +38,10 @@
   CMAKE_FORCE_CXX_COMPILER(clang++ GNU)
   SET(CMAKE_SIZEOF_VOID_P 4)
   set(CMAKE_XCODE_ATTRIBUTE_GCC_VERSION "com.apple.compilers.llvm.clang.1_0")
+  if(OGRE_CONFIG_ENABLE_LIBCPP_SUPPORT)
+    set(CMAKE_XCODE_ATTRIBUTE_CLANG_CXX_LANGUAGE_STANDARD "c++11")
+    set(CMAKE_XCODE_ATTRIBUTE_CLANG_CXX_LIBRARY "libc++")
+  endif()
 endif ()
 
 
@@ -239,6 +243,9 @@
   if (NOT CMAKE_OSX_ARCHITECTURES)
     set(CMAKE_OSX_ARCHITECTURES ${ARCHS_STANDARD_32_64_BIT})
   endif()
+  if(OGRE_CONFIG_ENABLE_LIBCPP_SUPPORT)
+    set(CMAKE_OSX_DEPLOYMENT_TARGET 10.7)
+  endif()
 
   # Make sure that the OpenGL render system is selected for non-iOS Apple builds
   set(OGRE_BUILD_RENDERSYSTEM_GL TRUE)
@@ -275,6 +282,8 @@
 cmake_dependent_option(OGRE_BUILD_COMPONENT_TERRAIN "Build Terrain component" TRUE "NOT SYMBIAN" FALSE)
 cmake_dependent_option(OGRE_BUILD_COMPONENT_PROPERTY "Build Property component" TRUE "Boost_FOUND" FALSE)
 cmake_dependent_option(OGRE_BUILD_PLUGIN_CG "Build Cg plugin" TRUE "Cg_FOUND;NOT OGRE_BUILD_PLATFORM_APPLE_IOS;NOT SYMBIAN" FALSE)
+cmake_dependent_option(OGRE_CONFIG_ENABLE_LIBCPP_SUPPORT "Enable libc++ support for OS X" FALSE "APPLE" FALSE)
+
 option(OGRE_BUILD_COMPONENT_RTSHADERSYSTEM "Build RTShader System component" TRUE)
 cmake_dependent_option(OGRE_BUILD_RTSHADERSYSTEM_CORE_SHADERS "Build RTShader System FFP core shaders" TRUE "OGRE_BUILD_COMPONENT_RTSHADERSYSTEM" FALSE)
 cmake_dependent_option(OGRE_BUILD_RTSHADERSYSTEM_EXT_SHADERS "Build RTShader System extensions shaders" TRUE "OGRE_BUILD_COMPONENT_RTSHADERSYSTEM" FALSE)
@@ -353,6 +362,7 @@
   OGRE_CONFIG_ENABLE_ZIP
   OGRE_CONFIG_ENABLE_GLES2_CG_SUPPORT
   OGRE_CONFIG_ENABLE_GLES2_GLSL_OPTIMISER
+  OGRE_CONFIG_ENABLE_LIBCPP_SUPPORT
   OGRE_USE_BOOST
   OGRE_INSTALL_SAMPLES_SOURCE
   OGRE_FULL_RPATH
diff -r 63835ef7e534 OgreMain/include/OgreMemorySTLAllocator.h
--- a/OgreMain/include/OgreMemorySTLAllocator.h	Thu Oct 18 15:30:52 2012 +0300
+++ b/OgreMain/include/OgreMemorySTLAllocator.h	Thu Apr 18 10:29:01 2013 +0300
@@ -155,13 +155,13 @@
 			// maximum size this can handle, delegate
 			return AllocPolicy::getMaxAllocationSize();
 		}
-
+#if OGRE_NO_LIBCPP_SUPPORT == 1
 		void construct(pointer p)
 		{
 			// call placement new
 			new(static_cast<void*>(p)) T();
 		}
-
+#endif
 		void construct(pointer p, const T& val)
 		{
 			// call placement new
diff -r 63835ef7e534 OgreMain/src/OgreDataStream.cpp
--- a/OgreMain/src/OgreDataStream.cpp	Thu Oct 18 15:30:52 2012 +0300
+++ b/OgreMain/src/OgreDataStream.cpp	Thu Apr 18 10:29:01 2013 +0300
@@ -692,6 +692,7 @@
 				mFStreamRO = 0; 
 				mFStream = 0; 
             }
+
         }
     }
     //-----------------------------------------------------------------------
diff -r 63835ef7e534 RenderSystems/GL/src/OSX/OgreOSXCocoaWindow.mm
--- a/RenderSystems/GL/src/OSX/OgreOSXCocoaWindow.mm	Thu Oct 18 15:30:52 2012 +0300
+++ b/RenderSystems/GL/src/OSX/OgreOSXCocoaWindow.mm	Thu Apr 18 10:29:01 2013 +0300
@@ -118,8 +118,11 @@
         NSString *windowTitle = [NSString stringWithCString:name.c_str() encoding:NSUTF8StringEncoding];
 		int winx = 0, winy = 0;
 		int depth = 32;
+#if OGRE_NO_LIBCPP_SUPPORT == 1
         NameValuePairList::const_iterator opt(NULL);
-		
+#else
+        NameValuePairList::const_iterator opt{};
+#endif
         mIsFullScreen = fullScreen;
 		
 		if(miscParams)
@@ -232,7 +235,11 @@
         }
         else
         {
+#if OGRE_NO_LIBCPP_SUPPORT == 1
             NameValuePairList::const_iterator param_useNSView_pair(NULL);
+#else
+            NameValuePairList::const_iterator param_useNSView_pair{};
+#endif
             param_useNSView_pair = miscParams->find("macAPICocoaUseNSView");
             
             if(param_useNSView_pair != miscParams->end())
@@ -626,7 +633,7 @@
             {
                 // Set the backing store size to the viewport dimensions
                 // This ensures that it will scale to the full screen size
-                GLint backingStoreDimensions[2] = { mWidth, mHeight };
+                GLint backingStoreDimensions[2] = { static_cast<GLint>(mWidth), static_cast<GLint>(mHeight) };
                 CGLSetParameter((CGLContextObj)[mGLContext CGLContextObj], kCGLCPSurfaceBackingSize, backingStoreDimensions);
                 CGLEnable((CGLContextObj)[mGLContext CGLContextObj], kCGLCESurfaceBackingSize);
 
diff -r 63835ef7e534 RenderSystems/GL/src/atifs/include/ps_1_4.h
--- a/RenderSystems/GL/src/atifs/include/ps_1_4.h	Thu Oct 18 15:30:52 2012 +0300
+++ b/RenderSystems/GL/src/atifs/include/ps_1_4.h	Thu Apr 18 10:29:01 2013 +0300
@@ -197,11 +197,15 @@
 		uint			RegModSize;
 
 	};
-
+#if OGRE_NO_LIBCPP_SUPPORT == 1
 	#define R_BASE  (sid_R0 - GL_REG_0_ATI)
 	#define C_BASE  (sid_C0 - GL_CON_0_ATI)
 	#define T_BASE  (sid_1T0 - GL_REG_0_ATI)
-
+#else
+    #define R_BASE  static_cast<unsigned int>((sid_R0 - GL_REG_0_ATI))
+    #define C_BASE  static_cast<unsigned int>((sid_C0 - GL_CON_0_ATI))
+    #define T_BASE  static_cast<unsigned int>((sid_1T0 - GL_REG_0_ATI))
+#endif
 	// static library database for tokens and BNF rules
 	static SymbolDef PS_1_4_SymbolTypeLib[];
 	static TokenRule PS_1_x_RulePath[];
